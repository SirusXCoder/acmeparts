# Generated by Django 3.0.5 on 2020-04-22 06:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pn', models.CharField(help_text='Enter product number', max_length=32, verbose_name='Product #:')),
                ('sn', models.CharField(help_text='Enter serial number', max_length=32, verbose_name='Serial #:')),
                ('description', models.TextField(blank=True, help_text='Description text...', null=True)),
                ('assigned_to', models.CharField(blank=True, help_text='Input assign to', max_length=32, null=True, verbose_name='Assigned To')),
                ('mfg_date', models.DateField(blank=True, help_text='Select or input a date', null=True, verbose_name='Manufacture Date')),
                ('mac_address', models.CharField(blank=True, help_text='Enter MAC Address', max_length=17, null=True, verbose_name='MAC Address')),
                ('service_log', models.TextField(blank=True, help_text='Enter service log details', null=True, verbose_name='Service Log')),
            ],
            options={
                'verbose_name': 'Board',
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Certification', max_length=20)),
            ],
            options={
                'verbose_name': 'Certification',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Configuration',
            },
        ),
        migrations.CreateModel(
            name='FormFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Form Factor', max_length=32, verbose_name='Form Factor')),
            ],
            options={
                'verbose_name': 'Form Factor',
                'verbose_name_plural': 'Form Factors',
            },
        ),
        migrations.CreateModel(
            name='MfgLoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Location Name', max_length=50, verbose_name='Manufacture Location')),
                ('address', models.CharField(blank=True, help_text='Enter Address', max_length=40, null=True, verbose_name='Address')),
                ('address2', models.CharField(blank=True, help_text='Enter Address', max_length=40, null=True, verbose_name='2nd Address')),
                ('city', models.CharField(blank=True, help_text='Enter City', max_length=40, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, help_text='Enter State', max_length=40, null=True, verbose_name='State')),
                ('country', models.CharField(blank=True, help_text='Enter country', max_length=40, null=True, verbose_name='Country')),
            ],
            options={
                'verbose_name': ('Vendor Location',),
                'verbose_name_plural': 'Vendor Locations',
            },
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Package', max_length=32)),
            ],
            options={
                'verbose_name': 'Package',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pn', models.CharField(help_text='Enter product number', max_length=32, verbose_name='Product #:')),
                ('sn', models.CharField(help_text='Enter serial number', max_length=32, verbose_name='Serial #:')),
                ('description', models.TextField(blank=True, help_text='Description text...', null=True)),
                ('assigned_to', models.CharField(blank=True, help_text='Input assign to', max_length=32, null=True, verbose_name='Assigned To')),
                ('mfg_date', models.DateField(blank=True, help_text='Select or input a date', null=True, verbose_name='Manufacture Date')),
                ('mac_address', models.CharField(blank=True, help_text='Enter MAC Address', max_length=17, verbose_name='MAC Address')),
                ('service_log', models.TextField(blank=True, help_text='Enter service log details', null=True, verbose_name='Service Log')),
                ('boards', models.ManyToManyField(blank=True, help_text='Select one or multiple boards...', to='products.Board')),
                ('certification', models.ManyToManyField(blank=True, help_text='Select one or multiple certifications...', to='products.Certification')),
                ('configuration', models.ManyToManyField(blank=True, help_text='Select one or multiple configurations...', to='products.Configuration')),
                ('formfactor', models.ForeignKey(blank=True, help_text='Select a form factor', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='products.FormFactor', verbose_name='Form Factor')),
                ('package', models.ManyToManyField(blank=True, help_text='Select one or multiple packages...', to='products.Package')),
                ('vendor', models.ManyToManyField(blank=True, help_text='Select one or multiple vendor locations', to='products.MfgLoc', verbose_name='Vendor Locations')),
            ],
            options={
                'verbose_name': 'System',
            },
        ),
        migrations.CreateModel(
            name='Chip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pn', models.CharField(help_text='Enter product number', max_length=32, verbose_name='Product #:')),
                ('sn', models.CharField(help_text='Enter serial number', max_length=32, verbose_name='Serial #:')),
                ('description', models.TextField(blank=True, help_text='Description text...', null=True)),
                ('mfg_date', models.DateField(blank=True, help_text='Select or input a date', null=True, verbose_name='Manufacture Date')),
                ('speed_grade', models.IntegerField(blank=True, default=0, help_text='Set speed grade', null=True, verbose_name='Speed Grade')),
                ('package', models.ManyToManyField(blank=True, help_text='Select one or multiple packages...', to='products.Package')),
                ('vendor', models.ManyToManyField(blank=True, help_text='Select one or multiple vendor locations', to='products.MfgLoc', verbose_name='Vendor Locations')),
            ],
            options={
                'verbose_name': 'Chip',
            },
        ),
        migrations.AddField(
            model_name='board',
            name='certification',
            field=models.ManyToManyField(blank=True, help_text='Select one or multiple certifications', to='products.Certification'),
        ),
        migrations.AddField(
            model_name='board',
            name='chips',
            field=models.ManyToManyField(blank=True, help_text='Select one or multiple chips...', related_name='bdchips', to='products.Chip'),
        ),
        migrations.AddField(
            model_name='board',
            name='vendor',
            field=models.ManyToManyField(blank=True, help_text='Select one or multiple vendor locations', to='products.MfgLoc', verbose_name='Vendor Locations'),
        ),
    ]
